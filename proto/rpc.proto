syntax = "proto3";

option go_package = "proto/";

import "google/protobuf/empty.proto";

message Job {
  string id = 1;
  string name = 2;
  string description = 3;
  string type = 4;
  string target = 5;
}

message Task {
  string id = 1;
  string job_id = 2;
  string agent_id = 3;
  TaskStatus status = 4;
  string result = 5;
}

enum TaskStatus {
  PENDING = 0;
  RUNNING = 1;
  COMPLETED = 2;
  FAILED = 3;
}

message AssignTaskRequest {
  Task task = 1;
  Job job = 2;
}

message AssignTaskResponse {
  bool accepted = 1;
  string message = 2;
}

message JobStatusRequest {
  string job_id = 1;
}

message JobStatusResponse {
  string job_id = 1;
  TaskStatus status = 2;
  string result = 3;
}

message Checksum {
  string filename = 1;
  string checksum = 2;
}

message ChecksumResponse {
  repeated Checksum files = 1;
}

message FileContent {
  string filename = 1;
  bytes content = 2;
}

message SyncStatus {
  bool success = 1;
  string message = 2;
}

message DeleteScriptRequest {
  string filename = 1;
}

message HeartbeatRequest {
  string agent_id = 1;
  string message = 2;
}
message HeartbeatResponse {
  bool ok = 1;
}

message RegisterAgentRequest {
  string device_id = 1;
}

message RegisterAgentResponse {
  string id = 1;
  string token = 2;
}

message UnregisterAgentRequest {
  string id = 1;
}

message Tool {
  string name = 1;
  repeated ToolAction actions = 2; // Actions the tool can perform
  repeated string os = 3;
}

message ToolAction {
  string name = 1;
  repeated string options = 2;
}

message GetToolsResponse {
  repeated Tool tools = 1;
}

message ExecuteToolRequest {
  string name = 1;
  string action = 2;
  repeated string options = 3;
}

message ExecuteToolResponse {
  string name = 1;
  string action = 2;
  bool accepted = 3;
  string message = 4;
}

message ToolExecutionStatusRequest {
  string name = 1;
  string action = 2;
}

message ToolExecutionStatusResponse {
  string name = 1;
  string action = 2;
  TaskStatus status = 3;
  string result = 4;
}

// Service for agent communication
service AgentService {
  // Tasks
  rpc AssignTask (AssignTaskRequest) returns (AssignTaskResponse);
  rpc ReportTaskStatus (JobStatusRequest) returns (JobStatusResponse);
  
  // Scripts
  rpc GetScriptChecksums(google.protobuf.Empty) returns (ChecksumResponse);
  rpc SendScriptFile(FileContent) returns (SyncStatus);
  rpc DeleteScriptFile(DeleteScriptRequest) returns (SyncStatus);

  // Agents
  rpc UnregisterAgentAsk(google.protobuf.Empty) returns (google.protobuf.Empty);
  rpc TryAgentAddress(google.protobuf.Empty) returns (google.protobuf.Empty);

  // Config
  rpc GetConfigChecksums(google.protobuf.Empty) returns (ChecksumResponse);
  rpc SendConfigFile(FileContent) returns (SyncStatus);

  // Tools
  rpc GetTools(google.protobuf.Empty) returns (GetToolsResponse);
  rpc ExecuteTool(ExecuteToolRequest) returns (ExecuteToolResponse);
  rpc ReportToolExecutionStatus(ToolExecutionStatusRequest) returns (ToolExecutionStatusResponse);
}

// Service for manager communication
service ManagerService {
  rpc RegisterAgent(RegisterAgentRequest) returns (RegisterAgentResponse);
  rpc UnregisterAgent(UnregisterAgentRequest) returns (google.protobuf.Empty);
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
}